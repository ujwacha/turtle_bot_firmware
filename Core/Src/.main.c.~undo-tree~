(undo-tree-save-format-version . 1)
"5e4d090c60a7abecc0a97eb4615d553b00ad8f3e"
[nil nil nil nil (26178 13474 291901 131000) 0 nil]
([nil nil ((#("    " 0 4 (fontified t)) . -3348) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) 3352 (3348 . 3352) (#("    " 0 4 (fontified nil)) . 3347) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (3346 . 3352) (t 26178 12586 692393 248000)) nil (26178 13474 291892 138000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -3351) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("n" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -3352) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -3353) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) 3354 (3351 . 3354) (3347 . 3351)) nil (26178 13474 291769 477000) 0 nil])
([nil nil ((3399 . 3400) (3397 . 3399) (3395 . 3397) (3393 . 3395) (3389 . 3393) (#("T" 0 1 (fontified nil)) . 3389) (3389 . 3390) (#("TIM2" 0 4 (fontified nil)) . -3389) (3389 . 3393) (#("T" 0 1 (fontified t)) . -3389) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 3390 (3379 . 3390) (3378 . 3379) (#(" " 0 1 (fontified t)) . -3378) (undo-tree-id2 . -1) 3379 (3378 . 3379) (777 . 796) (3351 . 3359) (#("uin" 0 3 (fontified nil)) . 3351) (3351 . 3354) (#("uint32_t" 0 8 (fontified nil)) . -3351) (3351 . 3359) (#("uint" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -3351) (undo-tree-id3 . -1) (undo-tree-id4 . -4) (undo-tree-id5 . -4) 3355 (3353 . 3355) (3351 . 3353) (3347 . 3351) (#("   " 0 3 (fontified nil)) . -3347) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (#(" " 0 1 (fontified t)) . 3350) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1)) nil (26178 13474 291325 267000) 0 nil])
([nil nil ((#("    uint32_t* thing = &TIM2->CCR4;
" 0 4 (fontified t) 4 11 (fontified t face font-lock-type-face) 11 12 (fontified t c-type c-decl-id-start face font-lock-type-face) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t face font-lock-variable-name-face) 17 19 (fontified t face font-lock-variable-name-face) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t)) . 3366) (undo-tree-id741 . -31) (undo-tree-id742 . 1) (undo-tree-id743 . 1) (undo-tree-id744 . -33) (undo-tree-id745 . -33) (undo-tree-id746 . -34) 3399 (t 26178 13474 329958 153000)) nil (26178 13521 784379 775000) 0 nil])
([nil nil ((#("cstdint" 0 7 (c-in-sws t fontified t face font-lock-string-face)) . 787) (undo-tree-id690 . -6) (undo-tree-id691 . -7) (undo-tree-id692 . -7) (undo-tree-id693 . -7) (undo-tree-id694 . -7) (undo-tree-id695 . -7) (undo-tree-id696 . -7) (undo-tree-id697 . -7) (undo-tree-id698 . -7) (undo-tree-id699 . -7) (undo-tree-id700 . -7) (undo-tree-id701 . -7) (undo-tree-id702 . -7) (undo-tree-id703 . -7) (undo-tree-id704 . -7) (undo-tree-id705 . -7) (undo-tree-id706 . -7) (undo-tree-id707 . -7) (undo-tree-id708 . -7) (undo-tree-id709 . -7) (undo-tree-id710 . -7) (undo-tree-id711 . -7) (undo-tree-id712 . -7) (undo-tree-id713 . -7) (undo-tree-id714 . -7) (undo-tree-id715 . -7) (undo-tree-id716 . -7) (undo-tree-id717 . -7) (undo-tree-id718 . -7) (undo-tree-id719 . -7) (undo-tree-id720 . -7) (undo-tree-id721 . -7) (undo-tree-id722 . -7) (undo-tree-id723 . -7) (undo-tree-id724 . -7) (undo-tree-id725 . -7) (undo-tree-id726 . -7) (undo-tree-id727 . -7) (undo-tree-id728 . -7) (undo-tree-id729 . -7) (undo-tree-id730 . -7) (undo-tree-id731 . -7) (undo-tree-id732 . -7) (undo-tree-id733 . -7) (undo-tree-id734 . -7) (undo-tree-id735 . -7) (undo-tree-id736 . -7) (undo-tree-id737 . -7) (undo-tree-id738 . -7) (undo-tree-id739 . -7) (undo-tree-id740 . -7)) nil (26178 13556 136513 808000) 0 nil])
([nil nil ((nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 787 . 796) (nil fontified nil 787 . 796) (nil c-in-sws t 787 . 796) (787 . 796) (#("std>" 0 3 (c-in-sws t fontified nil) 3 4 (fontified nil category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 787) (undo-tree-id749 . -4) (undo-tree-id750 . 1) (nil fontified nil 787 . 790) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 787 . 790) (nil c-in-sws t 787 . 790) (787 . 790) (#("stdint.h>" 0 9 (c-in-sws t fontified nil)) . -787) (nil fontified nil 787 . 796) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 787 . 796) (nil c-in-sws t 787 . 796) (787 . 796) (#("stdin" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face) 4 5 (fontified t c-in-sws t face font-lock-string-face)) . -787) (undo-tree-id751 . -4) (undo-tree-id752 . -5) (undo-tree-id753 . -5) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) (undo-tree-id791 . -5) (undo-tree-id792 . -5) (undo-tree-id793 . -5) (undo-tree-id794 . -5) (undo-tree-id795 . -5) (undo-tree-id796 . -5) (undo-tree-id797 . -5) (undo-tree-id798 . -5) (undo-tree-id799 . -5) (undo-tree-id800 . -5) (undo-tree-id801 . -5) (undo-tree-id802 . -5) (undo-tree-id803 . -5) (undo-tree-id804 . -5) (undo-tree-id805 . -5) (undo-tree-id806 . -5) (undo-tree-id807 . -5) (undo-tree-id808 . -5) (undo-tree-id809 . -5) (undo-tree-id810 . -5) (undo-tree-id811 . -5) (undo-tree-id812 . -5) (undo-tree-id813 . -5) (undo-tree-id814 . -5) 792 (788 . 792) (787 . 788)) nil (26178 13560 652454 133000) 0 nil] [nil nil ((nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 787 . 796) (nil fontified nil 787 . 796) (nil c-in-sws t 787 . 796) (787 . 796) (#("std>" 0 3 (c-in-sws t fontified nil) 3 4 (fontified nil category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 787) (undo-tree-id526 . -4) (undo-tree-id527 . 1) (nil fontified nil 787 . 790) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 787 . 790) (nil c-in-sws t 787 . 790) (787 . 790) (#("stdint.h>" 0 9 (c-in-sws t fontified nil)) . -787) (nil fontified nil 787 . 796) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 787 . 796) (nil c-in-sws t 787 . 796) (787 . 796) (#("stdi" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face)) . -787) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id532 . -2) (undo-tree-id534 . -2) (undo-tree-id536 . -2) (undo-tree-id538 . -2) (undo-tree-id540 . -2) (undo-tree-id542 . -2) (undo-tree-id544 . -2) (undo-tree-id546 . -2) (undo-tree-id548 . -3) (undo-tree-id550 . -3) (undo-tree-id552 . -3) (undo-tree-id554 . -3) (undo-tree-id556 . -3) (undo-tree-id558 . -3) (undo-tree-id560 . -3) (undo-tree-id562 . -3) (undo-tree-id564 . -3) (undo-tree-id566 . -3) (undo-tree-id568 . -3) (undo-tree-id570 . -3) (undo-tree-id572 . -3) (undo-tree-id574 . -3) (undo-tree-id576 . -3) (undo-tree-id578 . -3) (undo-tree-id580 . -3) (undo-tree-id582 . -3) (undo-tree-id584 . -3) (undo-tree-id586 . -3) (undo-tree-id588 . -3) (undo-tree-id590 . -3) (undo-tree-id592 . -4) (undo-tree-id594 . -4) (undo-tree-id596 . -4) (undo-tree-id598 . -4) (undo-tree-id600 . -4) (undo-tree-id602 . -4) (undo-tree-id604 . -4) (undo-tree-id606 . -4) (undo-tree-id608 . -4) (undo-tree-id610 . -4) (undo-tree-id612 . -4) (undo-tree-id614 . -4) (undo-tree-id616 . -4) (undo-tree-id618 . -4) (undo-tree-id620 . -4) (undo-tree-id622 . -4) (undo-tree-id624 . -4) (undo-tree-id626 . -4) (undo-tree-id628 . -4) (undo-tree-id630 . -4) (undo-tree-id632 . -4) (undo-tree-id634 . -4) (undo-tree-id636 . -4) (undo-tree-id638 . -4) (undo-tree-id640 . -4) (undo-tree-id642 . -4) (undo-tree-id644 . -4) (undo-tree-id646 . -4) (undo-tree-id648 . -4) (undo-tree-id650 . -4) (undo-tree-id652 . -4) (undo-tree-id654 . -4) (undo-tree-id656 . -4) (undo-tree-id658 . -4) (undo-tree-id660 . -4) (undo-tree-id662 . -4) (undo-tree-id664 . -4) (undo-tree-id666 . -4) (undo-tree-id668 . -4) (undo-tree-id670 . -4) (undo-tree-id672 . -4) (undo-tree-id674 . -4) (undo-tree-id676 . -4) (undo-tree-id678 . -4) (undo-tree-id680 . -4) (undo-tree-id682 . -4) (undo-tree-id684 . -4) (undo-tree-id686 . -4) (undo-tree-id688 . -4) 791 (789 . 791) (787 . 789)) ((#("st" 0 1 (fontified nil face font-lock-string-face c-in-sws t) 1 2 (fontified nil face font-lock-string-face c-in-sws t)) . 787) (#("di" 0 1 (fontified nil face font-lock-string-face c-in-sws t) 1 2 (fontified nil face font-lock-string-face c-in-sws t)) . 789) (787 . 791) (#("stdint.h>" 0 9 (fontified nil c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face))) . 787) (nil face nil 787 . 796) (787 . 796) (#("std" 0 3 (fontified nil c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face))) . 787) (nil face nil 787 . 790) (787 . 791) (#("stdint.h>" 0 8 (c-in-sws t fontified nil face (rainbow-delimiters-depth-1-face font-lock-string-face)) 8 9 (c-in-sws t fontified nil face (rainbow-delimiters-depth-1-face font-lock-string-face) category c->-as-paren-syntax)) . 787) (undo-tree-id747 . -9) (undo-tree-id748 . -9) (nil face (rainbow-delimiters-unmatched-face font-lock-string-face) 795 . 796) (nil face font-lock-string-face 787 . 795) (t 26178 13521 786279 833000)) (26178 13521 783859 772000) 0 nil])
([nil nil ((#("#include <stdint.h>
" 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-preprocessor-face) 1 8 (c-in-sws t fontified t face font-lock-preprocessor-face) 8 9 (c-in-sws t fontified t) 9 10 (fontified t category c-<-as-paren-syntax c-in-sws t syntax-table (1) face font-lock-string-face) 10 18 (c-in-sws t fontified t face font-lock-string-face) 18 19 (c-in-sws t fontified t face (rainbow-delimiters-unmatched-face font-lock-string-face) category c->-as-paren-syntax) 19 20 (fontified t c-in-sws t)) . 777) (undo-tree-id815 . -10) (undo-tree-id816 . 1) (undo-tree-id817 . -19) (undo-tree-id818 . -19) (undo-tree-id819 . -8) (undo-tree-id820 . -20) (undo-tree-id821 . -20) (undo-tree-id822 . -20) (undo-tree-id823 . -20) (undo-tree-id824 . -20) (undo-tree-id825 . -20) (undo-tree-id826 . -20) (undo-tree-id827 . -20) (undo-tree-id828 . -20) (undo-tree-id829 . -20) (undo-tree-id830 . -8) (undo-tree-id831 . -8) (undo-tree-id832 . -8) (undo-tree-id833 . -8) (undo-tree-id834 . -8) (undo-tree-id835 . -8) (undo-tree-id836 . -8) (undo-tree-id837 . -8) (undo-tree-id838 . -8) (undo-tree-id839 . -8) (undo-tree-id840 . -8) (undo-tree-id841 . -8) (undo-tree-id842 . -8) (undo-tree-id843 . -8) (undo-tree-id844 . -8) (undo-tree-id845 . -8) (undo-tree-id846 . -8) (undo-tree-id847 . -8) (undo-tree-id848 . -8) (undo-tree-id849 . -8) (undo-tree-id850 . -8) (undo-tree-id851 . -8) (undo-tree-id852 . -8) (undo-tree-id853 . -8) (undo-tree-id854 . -8) (undo-tree-id855 . -8) (undo-tree-id856 . -8) (undo-tree-id857 . -8) (undo-tree-id858 . -8) (undo-tree-id859 . -8) (undo-tree-id860 . -8) (undo-tree-id861 . -8) (undo-tree-id862 . -8) (undo-tree-id863 . -8) (undo-tree-id864 . -8) (undo-tree-id865 . -8) (undo-tree-id866 . -8) (undo-tree-id867 . -8) (undo-tree-id868 . -8) (undo-tree-id869 . -8) (undo-tree-id870 . 11) (undo-tree-id871 . -19) (undo-tree-id872 . -8) (undo-tree-id873 . -8) (undo-tree-id874 . -8) (undo-tree-id875 . -8) (undo-tree-id876 . -8) (undo-tree-id877 . -8) (undo-tree-id878 . -8) (undo-tree-id879 . -8) (undo-tree-id880 . -8) (undo-tree-id881 . -8) (undo-tree-id882 . -8) (undo-tree-id883 . -8) (undo-tree-id884 . -8) (undo-tree-id885 . -8) (undo-tree-id886 . -8) (undo-tree-id887 . -8) (undo-tree-id888 . -8) (undo-tree-id889 . -8) (undo-tree-id890 . -8) (undo-tree-id891 . -8) (undo-tree-id892 . -8) (undo-tree-id893 . -8) (undo-tree-id894 . -8) (undo-tree-id895 . -20) 785 (t 26178 13560 692705 510000)) nil (26178 13591 394157 126000) 0 nil])
nil
([nil nil ((nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 900 . 909) (nil fontified nil 900 . 909) (nil c-in-sws t 900 . 909) (900 . 909) (#("stdheader>" 0 3 (c-in-sws t fontified nil) 3 9 (fontified nil face font-lock-string-face c-in-sws t) 9 10 (fontified nil category c->-as-paren-syntax face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 900) (undo-tree-id896 . -9) (undo-tree-id897 . -10) (undo-tree-id898 . -9) (undo-tree-id899 . 7) (nil fontified nil 900 . 903) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 900 . 903) (nil c-in-sws t 900 . 903) (900 . 903) (#("stdint.h>" 0 9 (c-in-sws t fontified nil)) . -900) (nil fontified nil 900 . 909) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 900 . 909) (nil c-in-sws t 900 . 909) (900 . 909) (#("stdin" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face) 4 5 (fontified t c-in-sws t face font-lock-string-face)) . -900) (undo-tree-id900 . -4) (undo-tree-id901 . -5) (undo-tree-id902 . -5) (undo-tree-id903 . -5) (undo-tree-id904 . -5) (undo-tree-id905 . -5) (undo-tree-id906 . -5) (undo-tree-id907 . -5) (undo-tree-id908 . -5) (undo-tree-id909 . -5) (undo-tree-id910 . -5) (undo-tree-id911 . -5) (undo-tree-id912 . -5) (undo-tree-id913 . -5) (undo-tree-id914 . -5) (undo-tree-id915 . -5) (undo-tree-id916 . -5) (undo-tree-id917 . -5) (undo-tree-id918 . -5) (undo-tree-id919 . -5) (undo-tree-id920 . -5) (undo-tree-id921 . -5) (undo-tree-id922 . -5) (undo-tree-id923 . -5) (undo-tree-id924 . -5) (undo-tree-id925 . -5) (undo-tree-id926 . -5) (undo-tree-id927 . -5) (undo-tree-id928 . -5) (undo-tree-id929 . -5) (undo-tree-id930 . -5) (undo-tree-id931 . -5) (undo-tree-id932 . -5) (undo-tree-id933 . -5) (undo-tree-id934 . -5) (undo-tree-id935 . -5) (undo-tree-id936 . -5) (undo-tree-id937 . -5) (undo-tree-id938 . -5) (undo-tree-id939 . -5) (undo-tree-id940 . -5) 905 (900 . 905) (#("c" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -900) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (#("s" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -901) (undo-tree-id943 . -1) (undo-tree-id944 . -1) 902 (901 . 902) (900 . 901) (apply yas--snippet-revive 891 907 #s(yas--snippet nil (#s(yas--field 0 900 906 nil nil nil nil nil)) nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 900 906 nil nil nil nil nil)) nil 3 nil nil nil nil)) (891 . 907) (#("include <${0:header}>" 0 21 (c-in-sws t fontified nil)) . 891) (891 . 912) (#("i" 0 1 (c-in-sws t fontified nil)) . 891) (891 . 892) (#("include <header>" 0 16 (c-in-sws t fontified nil)) . -891) (891 . 907) (#("incl" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t c-in-sws t face font-lock-preprocessor-face) 3 4 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -891) (undo-tree-id945 . -4) (undo-tree-id946 . -4) (undo-tree-id947 . -4) 895 (893 . 895) (892 . 893) (891 . 892) (890 . 891) (t 26178 13591 433140 723000)) nil (26178 13614 543956 534000) 0 nil])
([nil nil ((#("#include <stdint.h>
" 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-preprocessor-face) 1 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (fontified t category c-<-as-paren-syntax c-in-sws t syntax-table (1) face font-lock-string-face) 10 18 (c-in-sws t fontified t face font-lock-string-face) 18 19 (c-in-sws t fontified t face (rainbow-delimiters-unmatched-face font-lock-string-face) category c->-as-paren-syntax) 19 20 (fontified t c-in-sws t)) . 890) (undo-tree-id948 . 1) (undo-tree-id949 . -19) (undo-tree-id950 . -19) (undo-tree-id951 . -10) (undo-tree-id952 . -18) (undo-tree-id953 . -18) (undo-tree-id954 . -18) (undo-tree-id955 . -18) (undo-tree-id956 . -18) (undo-tree-id957 . -18) (undo-tree-id958 . -18) (undo-tree-id959 . -18) (undo-tree-id960 . -18) (undo-tree-id961 . -18) (undo-tree-id962 . -18) (undo-tree-id963 . -18) (undo-tree-id964 . -18) (undo-tree-id965 . -18) (undo-tree-id966 . -18) (undo-tree-id967 . -18) (undo-tree-id968 . -18) (undo-tree-id969 . -18) (undo-tree-id970 . -18) (undo-tree-id971 . -18) (undo-tree-id972 . -18) (undo-tree-id973 . -18) (undo-tree-id974 . -18) (undo-tree-id975 . -18) (undo-tree-id976 . -18) (undo-tree-id977 . -18) (undo-tree-id978 . -18) (undo-tree-id979 . -18) (undo-tree-id980 . -18) (undo-tree-id981 . -18) (undo-tree-id982 . -18) (undo-tree-id983 . -18) (undo-tree-id984 . -18) (undo-tree-id985 . -18) (undo-tree-id986 . -18) (undo-tree-id987 . -18) (undo-tree-id988 . -18) (undo-tree-id989 . -18) (undo-tree-id990 . -18) (undo-tree-id991 . -18) (undo-tree-id992 . -18) (undo-tree-id993 . -18) (undo-tree-id994 . -18) (undo-tree-id995 . -18) (undo-tree-id996 . -18) (undo-tree-id997 . -18) (undo-tree-id998 . -18) (undo-tree-id999 . -18) (undo-tree-id1000 . -18) (undo-tree-id1001 . -18) (undo-tree-id1002 . -18) (undo-tree-id1003 . -18) (undo-tree-id1004 . -18) (undo-tree-id1005 . -18) (undo-tree-id1006 . -18) (undo-tree-id1007 . -18) (undo-tree-id1008 . -18) (undo-tree-id1009 . -18) (undo-tree-id1010 . -18) (undo-tree-id1011 . -18) (undo-tree-id1012 . -18) (undo-tree-id1013 . -18) (undo-tree-id1014 . -18) (undo-tree-id1015 . -18) (undo-tree-id1016 . -18) (undo-tree-id1017 . -18) (undo-tree-id1018 . -18) (undo-tree-id1019 . -18) (undo-tree-id1020 . -18) (undo-tree-id1021 . -18) (undo-tree-id1022 . -18) (undo-tree-id1023 . -18) (undo-tree-id1024 . -18) (undo-tree-id1025 . -18) (undo-tree-id1026 . -18) (undo-tree-id1027 . -18) (undo-tree-id1028 . -18) (undo-tree-id1029 . -18) (undo-tree-id1030 . -18) (undo-tree-id1031 . -18) (undo-tree-id1032 . -18) (undo-tree-id1033 . -18) (undo-tree-id1034 . -18) (undo-tree-id1035 . -18) (undo-tree-id1036 . 11) (undo-tree-id1037 . -19) (undo-tree-id1038 . -18) (undo-tree-id1039 . -18) (undo-tree-id1040 . -18) (undo-tree-id1041 . -18) (undo-tree-id1042 . -18) (undo-tree-id1043 . -18) (undo-tree-id1044 . -18) (undo-tree-id1045 . -18) (undo-tree-id1046 . -18) (undo-tree-id1047 . -18) (undo-tree-id1048 . -18) (undo-tree-id1049 . -18) (undo-tree-id1050 . -18) (undo-tree-id1051 . -18) (undo-tree-id1052 . -18) (undo-tree-id1053 . -18) (undo-tree-id1054 . -18) (undo-tree-id1055 . -18) (undo-tree-id1056 . -18) (undo-tree-id1057 . -18) (undo-tree-id1058 . -18) (undo-tree-id1059 . -18) (undo-tree-id1060 . -18) (undo-tree-id1061 . -20) 908 (t 26178 13614 583443 764000)) nil (26178 14031 599521 541000) 0 nil])
([nil nil ((889 . 891) (t 26178 14031 640811 824000)) nil (26178 14066 408022 367000) 0 nil])
([nil current ((901 . 910) (nil syntax-table nil 901 . 902) (nil syntax-table (1) 900 . 901) (#("stdheader\"" 0 3 (c-in-sws t fontified nil) 3 9 (fontified nil face font-lock-string-face c-in-sws t) 9 10 (fontified nil face font-lock-string-face c-in-sws t)) . 901) (undo-tree-id1062 . -9) (undo-tree-id1063 . -10) (undo-tree-id1064 . 7) (901 . 904) (#("stdint.h\"" 0 9 (fontified nil)) . -901) (nil syntax-table nil 917 . 918) (nil syntax-table (1) 916 . 917) (901 . 910) (#("stdin" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face) 4 5 (fontified t c-in-sws t face font-lock-string-face)) . -901) (undo-tree-id1065 . -4) (undo-tree-id1066 . -5) (undo-tree-id1067 . -5) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) (undo-tree-id1142 . -3) (undo-tree-id1143 . -3) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) (undo-tree-id1146 . -3) (undo-tree-id1147 . -3) (undo-tree-id1148 . -3) (undo-tree-id1149 . -3) (undo-tree-id1150 . -3) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -3) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -3) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) (undo-tree-id1160 . -3) (undo-tree-id1161 . -3) (undo-tree-id1162 . -3) (undo-tree-id1163 . -3) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) (undo-tree-id1166 . -3) (undo-tree-id1167 . -3) (undo-tree-id1168 . -3) (undo-tree-id1169 . -3) (undo-tree-id1170 . -3) (undo-tree-id1171 . -3) (undo-tree-id1172 . -3) (undo-tree-id1173 . -3) (undo-tree-id1174 . -3) (undo-tree-id1175 . -3) (undo-tree-id1176 . -3) (undo-tree-id1177 . -3) (undo-tree-id1178 . -3) (undo-tree-id1179 . -3) (undo-tree-id1180 . -3) (undo-tree-id1181 . -3) (undo-tree-id1182 . -3) (undo-tree-id1183 . -3) (undo-tree-id1184 . -3) (undo-tree-id1185 . -3) (undo-tree-id1186 . -3) (undo-tree-id1187 . -3) (undo-tree-id1188 . -3) (undo-tree-id1189 . -3) (undo-tree-id1190 . -3) (undo-tree-id1191 . -3) (undo-tree-id1192 . -3) (undo-tree-id1193 . -4) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) (undo-tree-id1197 . -4) (undo-tree-id1198 . -4) (undo-tree-id1199 . -4) (undo-tree-id1200 . -4) (undo-tree-id1201 . -4) (undo-tree-id1202 . -4) (undo-tree-id1203 . -4) (undo-tree-id1204 . -4) (undo-tree-id1205 . -4) (undo-tree-id1206 . -4) (undo-tree-id1207 . -4) (undo-tree-id1208 . -4) (undo-tree-id1209 . -4) (undo-tree-id1210 . -4) (undo-tree-id1211 . -4) (undo-tree-id1212 . -4) (undo-tree-id1213 . -4) (undo-tree-id1214 . -4) (undo-tree-id1215 . -4) (undo-tree-id1216 . -4) (undo-tree-id1217 . -4) (undo-tree-id1218 . -4) (undo-tree-id1219 . -4) (undo-tree-id1220 . -4) (undo-tree-id1221 . -4) (undo-tree-id1222 . -4) (undo-tree-id1223 . -4) (undo-tree-id1224 . -4) (undo-tree-id1225 . -4) (undo-tree-id1226 . -4) (undo-tree-id1227 . -4) (undo-tree-id1228 . -4) (undo-tree-id1229 . -4) (undo-tree-id1230 . -4) (undo-tree-id1231 . -4) (undo-tree-id1232 . -4) (undo-tree-id1233 . -4) (undo-tree-id1234 . -4) (undo-tree-id1235 . -5) (undo-tree-id1236 . -5) (undo-tree-id1237 . -5) (undo-tree-id1238 . -5) (undo-tree-id1239 . -5) (undo-tree-id1240 . -5) (undo-tree-id1241 . -5) (undo-tree-id1242 . -5) (undo-tree-id1243 . -5) (undo-tree-id1244 . -5) (undo-tree-id1245 . -5) (undo-tree-id1246 . -5) (undo-tree-id1247 . -5) (undo-tree-id1248 . -5) (undo-tree-id1249 . -5) (undo-tree-id1250 . -5) (undo-tree-id1251 . -5) (undo-tree-id1252 . -5) (undo-tree-id1253 . -5) (undo-tree-id1254 . -5) (undo-tree-id1255 . -5) (undo-tree-id1256 . -5) (undo-tree-id1257 . -5) (undo-tree-id1258 . -5) (undo-tree-id1259 . -5) (undo-tree-id1260 . -5) (undo-tree-id1261 . -5) (undo-tree-id1262 . -5) (undo-tree-id1263 . -5) (undo-tree-id1264 . -5) (undo-tree-id1265 . -5) (undo-tree-id1266 . -5) (undo-tree-id1267 . -5) (undo-tree-id1268 . -5) (undo-tree-id1269 . -5) (undo-tree-id1270 . -5) (undo-tree-id1271 . -5) (undo-tree-id1272 . -5) (undo-tree-id1273 . -5) (undo-tree-id1274 . -5) (undo-tree-id1275 . -5) (undo-tree-id1276 . -5) (undo-tree-id1277 . -5) (undo-tree-id1278 . -5) (undo-tree-id1279 . -5) (undo-tree-id1280 . -5) (undo-tree-id1281 . -5) (undo-tree-id1282 . -5) (undo-tree-id1283 . -5) (undo-tree-id1284 . -5) (undo-tree-id1285 . -5) (undo-tree-id1286 . -5) (undo-tree-id1287 . -5) (undo-tree-id1288 . -5) (undo-tree-id1289 . -5) (undo-tree-id1290 . -5) (undo-tree-id1291 . -5) (undo-tree-id1292 . -5) (undo-tree-id1293 . -5) (undo-tree-id1294 . -5) (undo-tree-id1295 . -5) (undo-tree-id1296 . -5) (undo-tree-id1297 . -5) 906 (901 . 906) (apply yas--snippet-revive 892 908 #s(yas--snippet nil (#s(yas--field 0 901 907 nil nil nil nil nil)) nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 901 907 nil nil nil nil nil)) nil 5 nil nil nil nil)) (892 . 908) (#("include \"${0:header}\"" 0 21 (c-in-sws t fontified nil)) . 892) (892 . 913) (#("i" 0 1 (c-in-sws t fontified nil)) . 892) (892 . 893) (#("include \"header\"" 0 16 (c-in-sws t fontified nil)) . -892) (892 . 908) (#("incl" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t c-in-sws t face font-lock-preprocessor-face) 3 4 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -892) (undo-tree-id1298 . -4) (undo-tree-id1299 . -4) (undo-tree-id1300 . -4) (undo-tree-id1301 . -4) 896 (894 . 896) (892 . 894) (891 . 892) (890 . 891)) nil (26178 14066 407985 933000) 0 nil])
nil
